import axios from 'axios'
import { v4 as uuidv4 } from 'uuid'

import { rugpullTestData } from './rugpull-test-data'

// –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API
const API_BASE_URL = 'http://localhost:3000' // –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π URL

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞ (—Ç–∞–∫–∏–µ –∂–µ –∫–∞–∫ –∏ –≤ detect-client.ts)
interface DetectionRequestTraceLog {
    address: string
    data: string
    topics: string[]
}

interface DetectionRequestTraceCall {
    from: string
    to: string
    input: string
    output?: string
    value?: string
    gasUsed: string
    calls?: DetectionRequestTraceCall[]
}

interface DetectionRequestState {
    balance: string
    nonce?: number
    code?: string
    storage?: Record<string, string>
}

interface DetectionRequestTrace {
    transactionHash?: string
    blockNumber?: number
    from: string
    to: string | null
    value?: string
    gas: string
    gasUsed: string
    input: string
    output?: string
    pre: Record<string, DetectionRequestState>
    post: Record<string, DetectionRequestState>
    calls?: DetectionRequestTraceCall[]
    logs?: DetectionRequestTraceLog[]
}

interface DetectionRequest {
    detectorName?: string
    id?: string
    chainId: number
    hash: string
    protocolName?: string
    protocolAddress?: string
    trace: DetectionRequestTrace
    additionalData?: Record<string, unknown>
}

interface DetectionResponse {
    requestId: string
    chainId: number
    detected: boolean
    error?: boolean
    message?: string
    protocolAddress?: string
    protocolName?: string
    additionalData?: Record<string, unknown>
}

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—É /detect —Å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –Ω–∞ Rugpull –¥–µ—Ç–µ–∫—Ç–æ—Ä
 */
export class RugpullDetectorClient {
    private baseUrl: string

    constructor(baseUrl: string = API_BASE_URL) {
        this.baseUrl = baseUrl
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç /detect —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Rugpull –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
     * @param request –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞
     * @returns –û—Ç–≤–µ—Ç –æ—Ç API
     */
    async detect(request: Partial<DetectionRequest>): Promise<DetectionResponse> {
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
        const completeRequest: DetectionRequest = {
            id: request.id || uuidv4(),
            detectorName: 'RugpullDetector', // –£–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –Ω–∞—à–µ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
            chainId: request.chainId || 1, // Ethereum mainnet –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            hash:
                request.hash ||
                '0x0000000000000000000000000000000000000000000000000000000000000000',
            trace: request.trace || this.createDefaultTrace(),
            ...request,
        }

        try {
            const response = await axios.post<DetectionResponse>(
                `${this.baseUrl}/detect`,
                completeRequest,
            )
            return response.data
        } catch (error) {
            if (axios.isAxiosError(error) && error.response) {
                console.error('API –æ—à–∏–±–∫–∞:', error.response.data)
                throw new Error(
                    `–û—à–∏–±–∫–∞ API: ${error.response.status} - ${JSON.stringify(error.response.data)}`,
                )
            }
            throw error
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–∏–ø—É
     * @param testType –¢–∏–ø —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     * @returns –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    getTestData(
        testType: 'contractDeployment' | 'suspiciousCall' | 'pauseCall' | 'mintCall',
    ): DetectionRequest {
        return rugpullTestData[testType]
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Rugpull –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
     * @returns –û–±—ä–µ–∫—Ç —Å–æ –≤—Å–µ–º–∏ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
     */
    getAllTestData(): Record<string, DetectionRequest> {
        return rugpullTestData
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É trace –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
     * @returns –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ trace
     */
    private createDefaultTrace(): DetectionRequestTrace {
        // –ê–¥—Ä–µ—Å–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        const ownerAddress = '0x1234567890123456789012345678901234567890'
        const contractAddress = '0x7a16ff8270133f063aab6c9977183d9e72835428'

        return {
            from: ownerAddress,
            to: contractAddress,
            gas: '200000',
            gasUsed: '100000',
            input: '0xf2fde38b0000000000000000000000001234567890123456789012345678901234567890', // transferOwnership
            pre: {
                [ownerAddress]: {
                    balance: '1000000000000000000',
                },
                [contractAddress]: {
                    balance: '0',
                    code: '0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80638456cb591461005157806395d89b411461005b578063a0712d6814610079578063f2fde38b14610095575b600080fd5b6100596100b1565b005b610063610152565b6040516100709190610b27565b60405180910390f35b610093600480360381019061008e9190610aa2565b6101e4565b005b6100af60048036038101906100aa9190610b42565b610276565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610141576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013890610b27565b60405180910390fd5b6000600360006101000a81548160ff021916908315150217905550565b6060600280546101619190610afd565b80601f016020809104026020016040519081016040528092919081815260200182805461018d9190610afd565b80156101da5780601f106101af576101008083540402835291602001916101da565b5b5090506101e9565b90565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610274576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026b90610b27565b60405180910390fd5b8061027e6100b1565b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610306576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102fd90610b27565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505056',
                },
            },
            post: {
                [ownerAddress]: {
                    balance: '999999750000000000',
                },
                [contractAddress]: {
                    balance: '0',
                },
            },
        }
    }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ Rugpull —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
 */
async function runRugpullTests() {
    const client = new RugpullDetectorClient()
    const testResults: Record<string, DetectionResponse> = {}

    try {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        const testTypes = ['contractDeployment', 'suspiciousCall', 'pauseCall', 'mintCall'] as const

        console.log('üîç –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ Rugpull...\n')

        for (const testType of testTypes) {
            const testData = client.getTestData(testType)

            console.log(`\nüìã –¢–µ—Å—Ç: ${testType}`)
            console.log(`üîπ –•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${testData.hash}`)
            console.log(`üîπ –ü—Ä–æ—Ç–æ–∫–æ–ª: ${testData.protocolName}`)

            if (testType !== 'contractDeployment') {
                const callInput = testData.trace.input.slice(0, 10)
                console.log(`üîπ –°–∏–≥–Ω–∞—Ç—É—Ä–∞ –≤—ã–∑–æ–≤–∞: ${callInput}`)
            }

            console.log('\n–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...')
            const response = await client.detect(testData)
            testResults[testType] = response

            console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:')
            console.log(JSON.stringify(response, null, 2))

            if (response.detected) {
                console.log('\nüö® –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —É–≥—Ä–æ–∑–∞ Rugpull!')
            } else {
                console.log('\n‚úÖ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞.')
            }
        }

        console.log('\nüìà –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:')

        let detectedCount = 0
        for (const [testType, result] of Object.entries(testResults)) {
            if (result.detected) {
                detectedCount++
                console.log(`üî¥ ${testType}: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è`)
            } else {
                console.log(`üü¢ ${testType}: –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã`)
            }
        }

        console.log(`\nüìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${detectedCount} –∏–∑ ${testTypes.length} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —É–≥—Ä–æ–∑.`)

        return testResults
    } catch (error) {
        console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:')
        console.error(error)
        throw error
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    runRugpullTests()
        .then(() => console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.'))
        .catch(() => console.log('\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏.'))
}
