interface VulnerabilityPattern {
  name: string;
  description: string;
  type: "backdoor" | "privileged" | "tokenomics";
  severity: "critical" | "high" | "medium" | "low";
  regex: RegExp;
  impact: string;
  recommendations: string;
  requiresDeepScan: boolean;
}

export const vulnerabilityPatterns: VulnerabilityPattern[] = [
  // BACKDOOR VULNERABILITIES
  {
    name: "Hidden Ownership Backdoor",
    description: "Contract contains a hidden owner with privileged capabilities, creating a high risk of unauthorized actions.",
    type: "backdoor",
    severity: "critical",
    regex: /address\s+private\s+_\w*[oO]wner\w*;|address\s+private\s+\w*[oO]wner\w*;/g,
    impact: "The hidden owner can perform privileged actions at any time, leading to:\n- Unauthorized control outside of contract governance\n- Potential for severe manipulation\n- Bypass of transparent governance mechanisms",
    recommendations: "Remove the hidden owner mechanism entirely. If ownership capabilities are required:\n- Use transparent ownership through OpenZeppelin's Ownable\n- Implement time-locks for privileged functions\n- Consider using community governance for important decisions",
    requiresDeepScan: false
  },
  {
    name: "Backdoor Minting Function",
    description: "Contract contains a backdoor function allowing unlimited token minting.",
    type: "backdoor",
    severity: "critical",
    regex: /function\s+\w*[mM]int\w*\([^)]*\)[^{]*{[^}]*_mint\([^;]*;/g,
    impact: "The ability to mint unlimited tokens can lead to:\n- Token supply inflation without community knowledge\n- Severe price manipulation\n- Complete destruction of token value",
    recommendations: "Remove arbitrary minting capabilities or add proper restrictions:\n- Set hard caps on total supply that cannot be exceeded\n- Use transparent governance for minting decisions\n- Add time-locks for minting functions to allow users to exit if needed",
    requiresDeepScan: false
  },
  {
    name: "Backdoor Self-Destruct Mechanism",
    description: "Contract contains a self-destruct functionality that could be used to rugpull.",
    type: "backdoor",
    severity: "critical",
    regex: /selfdestruct\s*\(\s*[^)]*\s*\)|suicide\s*\(\s*[^)]*\s*\)/g,
    impact: "Self-destruct can be used to:\n- Instantly terminate the contract\n- Send all remaining ETH to a specified address\n- Make token worthless instantly by destroying functionality",
    recommendations: "Remove all self-destruct functionality from the contract. If contract termination is needed:\n- Implement a phased shutdown with timelock\n- Ensure users can withdraw their assets\n- Use a transparent upgrade mechanism instead",
    requiresDeepScan: false
  },
  
  // PRIVILEGED FUNCTIONS
  {
    name: "User Blacklisting With No Time-Lock",
    description: "Owner can instantly blacklist any address without warning, freezing their token holdings with no challenge period.",
    type: "privileged",
    severity: "high",
    regex: /function\s+\w*[bB]lacklist\w*\([^)]*address[^)]*\)[^{]*{[^}]*\}/g,
    impact: "Blacklisting can be weaponized to:\n- Freeze assets of legitimate users\n- Block transactions arbitrarily\n- Prevent critics or competitors from using the token",
    recommendations: "If blacklisting is necessary for compliance:\n- Add a time-lock to blacklisting functions\n- Require multi-signature approval\n- Create a transparent appeal process\n- Consider community governance for blacklists",
    requiresDeepScan: false
  },
  {
    name: "Dynamic Transaction Limits",
    description: "Owner can modify maximum transaction amount at any time, potentially trapping user funds by setting extremely low limits.",
    type: "privileged",
    severity: "high",
    regex: /function\s+set\w*([lL]imit|[mM]ax)\w*\([^)]*\)[^{]*{[^}]*\}/g,
    impact: "Arbitrary transaction limits can be used to:\n- Prevent users from selling tokens\n- Enforce unequal trading rules\n- Effectively lock user funds while allowing select addresses to trade",
    recommendations: "Either remove dynamic limits or add appropriate safeguards:\n- Set minimum values that cannot be breached\n- Add time-locks to limit changes\n- Create graduated changes that happen slowly\n- Consider community governance for limit changes",
    requiresDeepScan: false
  },
  {
    name: "Pausable Transfers Without Timelock",
    description: "Contract allows owner to pause all transfers with no time limitation, potentially freezing user assets indefinitely.",
    type: "privileged",
    severity: "high",
    regex: /function\s+\w*[pP]ause\w*\([^)]*\)|function\s+\w*[eE]nable[tT]rading\w*\([^)]*\)/g,
    impact: "Pausable transfers can be abused to:\n- Prevent selling during price drops\n- Create artificial scarcity\n- Lock funds permanently if owner abandons contract",
    recommendations: "If pausing is required for emergencies:\n- Add a maximum pause duration\n- Implement automatic unpausing\n- Require multi-signature approval\n- Add transparent criteria for pausing",
    requiresDeepScan: false
  },
  
  // TOKENOMICS MANIPULATION
  {
    name: "Arbitrary Fee Adjustment",
    description: "Contract allows owner to change transaction fees to arbitrary values at any time.",
    type: "tokenomics",
    severity: "high",
    regex: /function\s+set\w*[fF]ee\w*\([^)]*\)[^{]*{[^}]*\}/g,
    impact: "Dynamic fees can be manipulated to:\n- Extract excessive value from users\n- Prevent selling by setting near-100% fees\n- Create unpredictable trading conditions",
    recommendations: "Either remove fee-changing capabilities or add constraints:\n- Set maximum fee caps (e.g., 5%)\n- Implement timelocks for fee changes\n- Use a gradual fee change mechanism\n- Add community governance for fee adjustments",
    requiresDeepScan: false
  },
  {
    name: "Dynamic Tax/Burn Mechanism",
    description: "Owner can change taxes or burn rates at any time, potentially causing severe tokenomics imbalance.",
    type: "tokenomics",
    severity: "medium",
    regex: /function\s+set\w*([tT]ax|[bB]urn)\w*\([^)]*\)[^{]*{[^}]*\}/g,
    impact: "Dynamic tax/burn rates can be used to:\n- Create artificial deflationary pressure\n- Extract undue value from transactions\n- Manipulate price through supply changes",
    recommendations: "Add proper restrictions to tax/burn mechanisms:\n- Set hard caps on maximum rates\n- Implement gradual changes with timelock\n- Create transparent rules for rate changes\n- Consider removing dynamic aspects entirely",
    requiresDeepScan: false
  },
  {
    name: "Centralized Liquidity Control",
    description: "Contract allows owner to remove liquidity without restrictions or timelocks.",
    type: "tokenomics",
    severity: "critical",
    regex: /function\s+\w*[lL]iquidity\w*\([^)]*\)[^{]*{[^}]*\}|function\s+\w*[wW]ithdraw\w*\([^)]*\)[^{]*{[^}]*\}/g,
    impact: "Centralized liquidity control can lead to:\n- Complete draining of trading pools\n- Immediate collapse of token price\n- Classic 'rugpull' scenario leaving investors with worthless tokens",
    recommendations: "Properly secure liquidity:\n- Lock liquidity with a third-party service\n- Add timelocks to liquidity withdrawals\n- Require multi-signature approval\n- Gradually vest liquidity access over long periods",
    requiresDeepScan: true
  }
];
